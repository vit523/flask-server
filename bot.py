import os
import logging
import requests
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from googleapiclient.discovery import build
from google.oauth2 import service_account

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
BOT_TOKEN = "7940210585:AAGS1-DLKzezCHHXD2DpQcjn0eYx_oMwrAs"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ç–æ–∫–µ–Ω –∏–∑ BotFather
SERVICE_ACCOUNT_FILE = "credentials.json"  # JSON-–∫–ª—é—á Google API
FOLDER_ID = "1YjA4gSFCULp6azLBHEKhLlXTVblqtljD"  # ID –ø–∞–ø–∫–∏ Google –î–∏—Å–∫–∞
WEBHOOK_URL = "http://127.0.0.1:8080/upload_link"  # –ê–¥—Ä–µ—Å Webhook-—Å–µ—Ä–≤–µ—Ä–∞ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ngrok/VPS)

# === –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø ===
logging.basicConfig(level=logging.INFO)

# === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–û–¢–ê ===
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

# === –ù–ê–°–¢–†–û–ô–ö–ê GOOGLE DRIVE API ===
credentials = service_account.Credentials.from_service_account_file(
    SERVICE_ACCOUNT_FILE,
    scopes=["https://www.googleapis.com/auth/drive"]
)
drive_service = build("drive", "v3", credentials=credentials)

# === –§–£–ù–ö–¶–ò–Ø –ó–ê–ì–†–£–ó–ö–ò –§–ê–ô–õ–ê –í GOOGLE –î–ò–°–ö ===
def upload_to_drive(file_path, file_name):
    try:
        file_metadata = {"name": file_name, "parents": [FOLDER_ID]}
        media = drive_service.files().create(
            body=file_metadata,
            media_body=file_path,
            fields="id"
        ).execute()

        file_id = media.get("id")
        file_link = f"https://drive.google.com/file/d/{file_id}/view?usp=sharing"

        logging.info(f"‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {file_link}")

        # üîπ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –≤ Webhook
        payload = {"file_link": file_link}
        response = requests.post(WEBHOOK_URL, json=payload)

        if response.status_code == 200:
            logging.info("‚úÖ –°—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ Webhook")
        else:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ Webhook: {response.text}")

        return file_link
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {e}")
        return None

# === –û–ë–†–ê–ë–û–¢–ö–ê –ö–û–ú–ê–ù–î–´ /–∑–∞–≥—Ä—É–∑–∏—Ç—å_–¥–æ–∫—É–º–µ–Ω—Ç ===
@dp.message_handler(commands=["–∑–∞–≥—Ä—É–∑–∏—Ç—å_–¥–æ–∫—É–º–µ–Ω—Ç"])
async def request_file(message: types.Message):
    await message.reply("üìÇ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤ Google –î–∏—Å–∫.")

# === –û–ë–†–ê–ë–û–¢–ö–ê –§–ê–ô–õ–û–í ===
@dp.message_handler(content_types=types.ContentType.DOCUMENT)
async def handle_document(message: types.Message):
    document = message.document
    file_name = document.file_name
    file_path = f"temp/{file_name}"

    os.makedirs("temp", exist_ok=True)

    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
    file = await bot.get_file(document.file_id)
    await bot.download_file(file.file_path, file_path)

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ Google –î–∏—Å–∫
    file_link = upload_to_drive(file_path, file_name)

    if file_link:
        await message.reply(f"‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –≤ Google –î–∏—Å–∫: [–°—Å—ã–ª–∫–∞]({file_link})", parse_mode="Markdown")
    else:
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞.")

    os.remove(file_path)  # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª

# === –ó–ê–ü–£–°–ö –ë–û–¢–ê ===
if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)